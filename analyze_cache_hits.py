#!/usr/bin/env python3
"""
An√°lisis matem√°tico de la proporci√≥n de cache hits esperada vs observada
"""
import math

def analyze_cache_hits():
    print('üîç AN√ÅLISIS MATEM√ÅTICO DE CACHE HITS')
    print('='*60)
    
    # Par√°metros del experimento
    N = 20000  # Pool total de preguntas
    n = 10000  # Requests realizados
    k_observed = 260  # Cache hits observados
    
    print(f'üìä PAR√ÅMETROS DEL EXPERIMENTO:')
    print(f'  ‚Ä¢ Pool de preguntas disponibles: {N:,}')
    print(f'  ‚Ä¢ Requests totales realizados: {n:,}')
    print(f'  ‚Ä¢ Cache hits observados: {k_observed}')
    print(f'  ‚Ä¢ Rate observado: {k_observed/n*100:.2f}%')
    
    print(f'\nüéØ AN√ÅLISIS TE√ìRICO (Distribuci√≥n de Poisson):')
    
    # Para selecci√≥n aleatoria con reemplazo de n elementos de N posibles
    # La probabilidad de seleccionar una pregunta espec√≠fica es 1/N
    p_single = 1/N
    lambda_param = n * p_single  # Par√°metro Œª para distribuci√≥n de Poisson
    
    print(f'  ‚Ä¢ Probabilidad por pregunta: {p_single:.6f}')
    print(f'  ‚Ä¢ Par√°metro Œª (Poisson): {lambda_param:.2f}')
    print(f'  ‚Ä¢ Veces esperadas por pregunta: {lambda_param:.2f}')
    
    # Calcular probabilidades y cache hits esperados
    total_cache_hits_expected = 0
    
    print(f'\nüìà C√ÅLCULO DE CACHE HITS POR REPETICI√ìN:')
    for k in range(2, 8):  # k = n√∫mero de veces que aparece una pregunta
        prob_k = (lambda_param**k * math.exp(-lambda_param)) / math.factorial(k)
        questions_with_k_appearances = N * prob_k
        cache_hits_from_k = (k-1) * questions_with_k_appearances  # k-1 cache hits por pregunta
        total_cache_hits_expected += cache_hits_from_k
        
        if prob_k > 0.0001:  # Solo mostrar si es significativo
            print(f'  ‚Ä¢ k={k} apariciones: {questions_with_k_appearances:.1f} preguntas ‚Üí {cache_hits_from_k:.0f} cache hits')
    
    print(f'\nüìä RESULTADOS COMPARATIVOS:')
    print(f'  ‚Ä¢ Cache hits esperados (te√≥rico): {total_cache_hits_expected:.0f}')
    print(f'  ‚Ä¢ Cache hits observados (real): {k_observed}')
    print(f'  ‚Ä¢ Diferencia absoluta: {abs(k_observed - total_cache_hits_expected):.0f}')
    print(f'  ‚Ä¢ Ratio observado/esperado: {k_observed/total_cache_hits_expected:.2f}x')
    
    # An√°lisis alternativo: Problema del cumplea√±os generalizado
    print(f'\nüé≤ AN√ÅLISIS ALTERNATIVO (Problema del Cumplea√±os):')
    
    # Aproximaci√≥n para preguntas √∫nicas esperadas
    expected_unique = N * (1 - math.exp(-n/N))
    expected_duplicates = n - expected_unique
    
    print(f'  ‚Ä¢ Preguntas √∫nicas esperadas: {expected_unique:.0f}')
    print(f'  ‚Ä¢ Total de duplicados esperados: {expected_duplicates:.0f}')
    print(f'  ‚Ä¢ Cache hits ‚âà duplicados: {expected_duplicates:.0f}')
    
    # Rango de confianza (¬±2 desviaciones est√°ndar)
    variance = total_cache_hits_expected  # Para Poisson, varianza = media
    std_dev = math.sqrt(variance)
    lower_bound = total_cache_hits_expected - 2*std_dev
    upper_bound = total_cache_hits_expected + 2*std_dev
    
    print(f'\nüìè RANGO DE CONFIANZA (95%):')
    print(f'  ‚Ä¢ Media esperada: {total_cache_hits_expected:.0f}')
    print(f'  ‚Ä¢ Desviaci√≥n est√°ndar: {std_dev:.1f}')
    print(f'  ‚Ä¢ Rango [Œº-2œÉ, Œº+2œÉ]: [{lower_bound:.0f}, {upper_bound:.0f}]')
    
    # Verificar si est√° dentro del rango
    is_within_range = lower_bound <= k_observed <= upper_bound
    
    print(f'\n‚úÖ CONCLUSI√ìN FINAL:')
    if is_within_range:
        print(f'  ‚úì Los {k_observed} cache hits est√°n DENTRO del rango esperado')
        print(f'  ‚úì El resultado es estad√≠sticamente NORMAL')
        print(f'  ‚úì La proporci√≥n {k_observed/n*100:.1f}% es matem√°ticamente correcta')
    else:
        if k_observed < lower_bound:
            print(f'  ‚ö† Los {k_observed} cache hits est√°n por DEBAJO del rango esperado')
            print(f'  ‚ö† Podr√≠a indicar un problema en la aleatoriedad')
        else:
            print(f'  ‚ö† Los {k_observed} cache hits est√°n por ENCIMA del rango esperado')
            print(f'  ‚ö† Podr√≠a indicar sesgo en la selecci√≥n')
    
    # Informaci√≥n adicional
    print(f'\nüí° CONTEXTO ADICIONAL:')
    print(f'  ‚Ä¢ Con selecci√≥n aleatoria pura, ~{total_cache_hits_expected/n*100:.1f}% de cache hits es normal')
    print(f'  ‚Ä¢ Pool de 20k preguntas para 10k requests es suficientemente grande')
    print(f'  ‚Ä¢ La baja tasa de cache hits confirma buena diversidad del dataset')
    
    return {
        'observed': k_observed,
        'expected': total_cache_hits_expected,
        'is_normal': is_within_range,
        'confidence_range': (lower_bound, upper_bound)
    }

if __name__ == "__main__":
    analyze_cache_hits()